import 'cypress-web-vitals'
const { GoogleSpreadsheet } = require('google-spreadsheet');
import { JWT } from 'google-auth-library'

async function writeToGoogleSheet(metrics, formFactor) {
  const credentials = require('../../credentials.json'); // Ruta a tus credenciales


  try {
    const jwt = new JWT({
      // env var values here are copied from service account credentials generated by google
      // see "Authentication" section in docs for more info
      email: credentials.client_email,
      key: credentials.private_key.replace(/\\n/g, '\n'),
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
        'https://www.googleapis.com/auth/drive.file',
      ],
    });
    
    // Inicializa la hoja de cálculo
    const doc = new GoogleSpreadsheet('16eN73i49JqAl6fn8CY5H7N2du119F6hpLPV86kccEzM',jwt)

    // Carga la información de la hoja de cálculo
    await doc.loadInfo();

    // Selecciona la primera hoja
    const sheet = doc.sheetsByIndex[formFactor ==='desktop' ? 0 : 1];
    await sheet.loadHeaderRow();
    // Verifica si la hoja tiene encabezados
    if (sheet.rowCount === 0 || !sheet.headerValues || sheet.headerValues.length === 0) {
      console.log('Estableciendo encabezados en la hoja...');
      await sheet.setHeaderRow([
        'Timestamp',
        'FormFactor',
        'Performance',
        'FCP',
        'LCP',
        'TBT',
        'CLS',
        'SpeedIndex',
      ]);
    }

    // Escribe una nueva fila con las métricas
    const newRow = {
      Timestamp: new Date().toISOString(),
      FormFactor: formFactor,
      Performance: metrics.performance || 'N/A',
      FCP: metrics['first-contentful-paint'] || 'N/A',
      LCP: metrics['largest-contentful-paint'] || 'N/A',
      TBT: metrics['total-blocking-time'] || 'N/A',
      CLS: metrics['cumulative-layout-shift'] || 'N/A',
      SpeedIndex: metrics['speed-index'] || 'N/A',
    };

    await sheet.addRow(newRow);
    console.log('Métricas añadidas a Google Sheets:', newRow);
  } catch (error) {
    console.error('Error al escribir en Google Sheets:', error);
  }
}

describe("Lighthouse Performance Metrics - Desktop and Mobile", () => {
  const saveMetrics = (metrics, formFactor) => {
    writeToGoogleSheet(metrics, formFactor).catch(console.error);
  };
  it('Should capture Lighthouse metrics for the men stores on Desktop', () => {
    // Variables para métricas
    const metrics = {};
    const formFactor = 'desktop'; // Para Desktop

    // Escuchar los logs y capturar las métricas
    cy.on('log:added', (log) => {
      if (log.message.includes('record is')) {
        const [metric, value] = log.message.match(/(\w[\w-]+).*is\s([\d.]+)/).slice(1, 3);
        metrics[metric] = parseFloat(value);
      }
    });

    // Ejecutar Lighthouse para Desktop
    cy.visit('/');
    cy.lighthouse({
      performance: 10,
      'first-contentful-paint': 3800,
      'largest-contentful-paint': 10500,
      'total-blocking-time': 11500,
      'cumulative-layout-shift': 0.1,
      'speed-index': 17400,
    }, {
      formFactor: formFactor,
      screenEmulation: {
        mobile: false,
        disable: true,
        width: 1280,
        height: 720,
        deviceScaleRatio: 1
      },
    }).then((report) => {
      console.log(JSON.stringify(report),'report')
      const filePath = './reports/lighthouse-metrics-desktop.json';

      // Agregar timestamp al registro
      const timestamp = new Date().toISOString();
      const metricsWithTimestamp = { timestamp, formFactor, ...metrics };

      // Leer el archivo y manejar el caso de archivo vacío o inexistente
      cy.readFile(filePath, { failOnNonExistence: false }).then((currentData) => {
        let updatedData = [];

        if (Array.isArray(currentData)) {
          updatedData = [...currentData, metricsWithTimestamp];
        } else {
          updatedData = [metricsWithTimestamp];
        }

        // Escribir los datos actualizados al archivo
        cy.writeFile(filePath, updatedData);
        console.log('Lighthouse Metrics añadidas:', metricsWithTimestamp);
        saveMetrics(metrics, formFactor);
      });
    });
  });

  it('Should capture Lighthouse metrics for the men stores on Mobile', () => {
    // Variables para métricas
    const metrics = {};
    const formFactor = 'mobile'; // Para Mobile

    // Escuchar los logs y capturar las métricas
    cy.on('log:added', (log) => {
      if (log.message.includes('record is')) {
        const [metric, value] = log.message.match(/(\w[\w-]+).*is\s([\d.]+)/).slice(1, 3);
        metrics[metric] = parseFloat(value);
      }
    });

    // Ejecutar Lighthouse para Mobile
    cy.visit('/');
    cy.lighthouse({
      performance: 10,
      'first-contentful-paint': 3800,
      'largest-contentful-paint': 10500,
      'total-blocking-time': 11500,
      'cumulative-layout-shift': 0.1,
      'speed-index': 17400,
    }, {
      formFactor: formFactor,
      screenEmulation: {
        mobile: true,
        disable: false,
        width: 375,
        height: 667,
        deviceScaleRatio: 2
      },
    }).then(() => {
      const filePath = './reports/lighthouse-metrics-mobile.json';

      // Agregar timestamp al registro
      const timestamp = new Date().toISOString();
      const metricsWithTimestamp = { timestamp, formFactor, ...metrics };

      // Leer el archivo y manejar el caso de archivo vacío o inexistente
      cy.readFile(filePath, { failOnNonExistence: false }).then((currentData) => {
        let updatedData = [];

        if (Array.isArray(currentData)) {
          updatedData = [...currentData, metricsWithTimestamp];
        } else {
          updatedData = [metricsWithTimestamp];
        }

        // Escribir los datos actualizados al archivo
        cy.writeFile(filePath, updatedData);
        console.log('Lighthouse Metrics añadidas:', metricsWithTimestamp);
        saveMetrics(metrics, formFactor);
      });
    });
  });
});

